# PRONTO.jl dev_0.4
module PRONTO

using FunctionWrappers: FunctionWrapper
using StaticArrays
using FastClosures
export @closure

using Base: @kwdef
export @kwdef
# lu = PRONTO.lu
# function lu end
import LinearAlgebra
using LinearAlgebra: mul!, I
using UnicodePlots
using MacroTools
using SparseArrays
using MatrixEquations

# using OrdinaryDiffEq
using DifferentialEquations
using Symbolics
using Symbolics: derivative
using SymbolicUtils.Code

using ThreadTools

using Dates: now

using MacroTools
using MacroTools: @capture

using Interpolations

using Base: OneTo
using Base: fieldindex
import Base: extrema, length, eachindex, show, size, eltype, getproperty, getindex






export pronto
export info

export @tick,@tock,@clock

export ODE, Buffer
export preview

# ----------------------------------- #. preliminaries & typedefs ----------------------------------- #

export Model
export nx,nu,nÎ¸

abstract type Model{NX,NU,NÎ˜} <: FieldVector{NÎ˜,Float64} end

nx(::Model{NX,NU,NÎ˜}) where {NX,NU,NÎ˜} = NX
nu(::Model{NX,NU,NÎ˜}) where {NX,NU,NÎ˜} = NU
nÎ¸(::Model{NX,NU,NÎ˜}) where {NX,NU,NÎ˜} = NÎ˜

nx(::Type{<:Model{NX,NU,NÎ˜}}) where {NX,NU,NÎ˜} = NX
nu(::Type{<:Model{NX,NU,NÎ˜}}) where {NX,NU,NÎ˜} = NU
nÎ¸(::Type{<:Model{NX,NU,NÎ˜}}) where {NX,NU,NÎ˜} = NÎ˜

# not used
inv!(A) = LinearAlgebra.inv!(LinearAlgebra.cholesky!(Hermitian(A)))


show(io::IO, ::T) where {T<:Model} = print(io, "$T model")

iscompact(io) = get(io, :compact, false)
function show(io::IO,::MIME"text/plain", Î¸::T) where {T<:Model}
    if iscompact(io)
        print(io, "$T model")
    else
        println(io, "$(as_bold(T)) model with parameter values:")
        for name in fieldnames(T)
            println(io, "  $name: $(getfield(Î¸,name))")
        end
    end
end


# typelength(::Type{<:Number}) = 1
# typelength(::Type{T}) where {T} = length(T)

# function Base.iterate(Î¸::Model, state=1)
#     # go thru each the length of each type
#     # if bigger than state

#     (value, state+1)
# end
# function getindex(Î¸::Model, i)
#     iterate thru until value
# end




struct SymbolicModel{T}
    vars
end

function SymbolicModel(T::DataType)
    @variables Î¸[1:nÎ¸(T)]
    SymbolicModel{T}(collect(Î¸))
end
# getproperty(Î¸::SymbolicModel{T}, name::Symbol) where {T} = getindex(Î¸.vars, fieldindex(T, name))
getindex(Î¸::SymbolicModel{T}, i::Integer) where {T} = getindex(getfield(Î¸, :vars), i)
getproperty(Î¸::SymbolicModel{T}, name::Symbol) where {T} = getindex(Î¸, fieldindex(T, name))


# ----------------------------------- #. helpers ----------------------------------- #
include("helpers.jl")


#YO: can I actually deprecate this? :)
views(::Model{NX,NU,NÎ˜},Î¾) where {NX,NU,NÎ˜} = (@view Î¾[1:NX]),(@view Î¾[NX+1:end])


# ----------------------------------- #. model functions ----------------------------------- #
# definitions for these must be generated from a user-specified model by codegen


# or just throw a method error?
struct ModelDefError <: Exception
    Î¸::Model
end

function Base.showerror(io::IO, e::ModelDefError)
    T = typeof(e.Î¸)
    print(io, "PRONTO is missing method definitions for the $T model.\n")
end



f!(dx,x,u,t,Î¸) = throw(ModelDefError(Î¸))

Q(Î±,Î¼,t,Î¸) = throw(ModelDefError(Î¸))
R(Î±,Î¼,t,Î¸) = throw(ModelDefError(Î¸))
function Pf(Î±,Î¼,tf,Î¸::Model{NX}) where {NX}
    # xref = Î¸.ref
    # uref = @SVector zeros(nu(Î¸))
    Ar = fx(Î±, Î¼, tf, Î¸)
    Br = fu(Î±, Î¼, tf, Î¸)
    Qr = Q(Î±, Î¼, tf, Î¸)
    Rr = R(Î±, Î¼, tf, Î¸)
    Pf,_ = arec(Ar,Br*(Rr\Br'),Qr)
    # Pf,_ = ared(Ar,Br,Rr,Qr)
    return SMatrix{NX,NX,Float64}(Pf)
end

#     B*inv(R)*B'
#    # solve algebraic riccati eq at time T to get terminal cost
#    Pt,_ = arec(A(Î¾,T), B(Î¾,T)inv(Rr(T))B(Î¾,T)', Qr(T))
   

# solution to DARE at desired equilibrium
# ref = zeros(NX)
# Pp,_ = ared(fx(ref,zeros(NU)), fu(ref,zeros(NU)), Rlqr, Qlqr)

f(x,u,t,Î¸) = throw(ModelDefError(Î¸))
fx(x,u,t,Î¸) = throw(ModelDefError(Î¸))
fu(x,u,t,Î¸) = throw(ModelDefError(Î¸))
# fxx(x,u,t,Î¸) = throw(ModelDefError(Î¸))
# fxu(x,u,t,Î¸) = throw(ModelDefError(Î¸))
# fuu(x,u,t,Î¸) = throw(ModelDefError(Î¸))

l(x,u,t,Î¸) = throw(ModelDefError(Î¸))
lx(x,u,t,Î¸) = throw(ModelDefError(Î¸))
lu(x,u,t,Î¸) = throw(ModelDefError(Î¸))
lxx(x,u,t,Î¸) = throw(ModelDefError(Î¸))
lxu(x,u,t,Î¸) = throw(ModelDefError(Î¸))
luu(x,u,t,Î¸) = throw(ModelDefError(Î¸))

p(x,u,t,Î¸) = throw(ModelDefError(Î¸))
px(x,u,t,Î¸) = throw(ModelDefError(Î¸))
pxx(x,u,t,Î¸) = throw(ModelDefError(Î¸))

# L(Î»,x,u,t,Î¸) = throw(ModelDefError(Î¸))
# Lx(Î»,x,u,t,Î¸) = throw(ModelDefError(Î¸))
# Lu(Î»,x,u,t,Î¸) = throw(ModelDefError(Î¸))
Lxx(Î»,x,u,t,Î¸) = throw(ModelDefError(Î¸))
Lxu(Î»,x,u,t,Î¸) = throw(ModelDefError(Î¸))
Luu(Î»,x,u,t,Î¸) = throw(ModelDefError(Î¸))



# ----------------------------------- #. components ----------------------------------- #


include("codegen.jl") # takes derivatives, generates model functions
include("odes.jl") # ODE solution handling
include("regulator.jl")
include("projection.jl")
include("optimizer.jl")
include("armijo.jl")



# ----------------------------------- pronto loop ----------------------------------- #

# export dx_dt!
# # export dx_dt_2o!
# export dx_dt_ol!
# export dPr_dt!
fwd(Ï„) = extrema(Ï„)
bkwd(Ï„) = reverse(fwd(Ï„))

# solve_forward(fxn, x0, p, Ï„; kw...)
# solve_backward(fxn, x0, p, Ï„; kw...)

# solves for x(t),u(t)'
function pronto(Î¸::Model{NX,NU,NÎ˜}, x0::StaticVector, Ï†, Ï„; Î³max=1.0,tol = 1e-5, maxiters = 20,verbose=true) where {NX,NU,NÎ˜}
    t0,tf = Ï„

    for i in 1:maxiters
        info(i, "iteration")
        # -------------- build regulator -------------- #
        # Î±,Î¼ -> Kr,x,u
        verbose && iinfo("regulator")
        Kr = regulator(Î¸, Ï†, Ï„)
        verbose && iinfo("projection")
        Î¾ = projection(Î¸, x0, Ï†, Kr, Ï„)

        # -------------- search direction -------------- #
        # Kr,x,u -> z,v


        verbose && iinfo("lagrangian")
        Î» = lagrangian(Î¸,Î¾,Ï†,Kr,Ï„)
        verbose && iinfo("optimizer")
        Ko = optimizer(Î¸,Î»,Î¾,Ï†,Ï„)
        verbose && iinfo("using $(is2ndorder(Ko) ? "2nd" : "1st") order search")
        verbose && iinfo("costate")
        vo = costate(Î¸,Î»,Î¾,Ï†,Ko,Ï„)
        verbose && iinfo("search_direction")
        Î¶ = search_direction(Î¸,Î¾,Ko,vo,Ï„)

        # -------------- cost/derivatives -------------- #
        verbose && iinfo("cost/derivs")

        Dh,D2g = cost_derivs(Î¸,Î»,Ï†,Î¾,Î¶,Ï„)
        
        Dh > 0 && (info("increased cost - quitting"); (return Ï†))
        -Dh < tol && (info(as_bold("PRONTO converged")); (return Ï†))

        # compute cost
        h = cost(Î¾, Ï„)
        # verbose && iinfo(as_bold("h = $(h)\n"))
        # print(Î¾)
        info("Dh = $Dh, h = $h")

        # -------------- select Î³ -------------- #

        # Î³ = Î³max; 
        aÎ±=0.4; aÎ²=0.7
        Î³ = min(1, 1/maximum(maximum(Î¶.x(t) for t in t0:0.0001:tf)))

        local Î·
        while Î³ > aÎ²^25
            verbose && iinfo("armijo Î³ = $(round(Î³; digits=6))")
            #P(Î·)
            Î· = armijo_projection(Î¸,x0,Î¾,Î¶,Î³,Kr,Ï„)
            g = cost(Î·, Ï„)
            h-g >= -aÎ±*Î³*Dh ? break : (Î³ *= aÎ²)
        end
        Ï† = Î·
    end
    return Ï†
end


# @build $T dÏ†Ì‚_dt(M,Î¸,t,Î¾,Ï†,Î¶,Ï†Ì‚,Î³,Pr) -> vcat(

#     PRONTO.f($M,Î¸,t,Ï†Ì‚)...,
#     ($u + Î³*$v) - ($Kr)*($Î±Ì‚ - ($x + Î³*$z)) - $Î¼Ì‚...
# )
# @build $T dh_dt(M,Î¸,t,Î¾) -> PRONTO.l($M,Î¸,t,Î¾)


function cost_derivs(Î¸,Î»,Ï†,Î¾,Î¶,Ï„)
    t0,tf = Ï„

    ðŸš² = solve(ODEProblem(dðŸš²_dt, 0, (t0,tf), (Î¸,Î¾,Î¶)), Tsit5(); reltol=1e-7)(tf)
    ðŸš— = solve(ODEProblem(dðŸš—_dt, 0, (t0,tf), (Î¸,Î»,Î¾,Î¶)), Tsit5(); reltol=1e-7)(tf)

    zf = Î¶.x(tf)
    Î±f = Ï†.x(tf)
    Î¼f = Ï†.u(tf)
    rf = px(Î±f,Î¼f,tf,Î¸)
    Pf = pxx(Î±f,Î¼f,tf,Î¸)
    Dh = ðŸš² + rf'zf
    D2g = ðŸš— + zf'Pf*zf
    return Dh,D2g
end

function dðŸš²_dt(_, (Î¸,Î¾,Î¶), t)
    x = Î¾.x(t)
    u = Î¾.u(t)
    z = Î¶.x(t)
    v = Î¶.u(t)
    a = lx(x,u,t,Î¸)
    b = lu(x,u,t,Î¸)
    return a'z + b'v
end

function dðŸš—_dt(_, (Î¸,Î»,Î¾,Î¶), t)
    x = Î¾.x(t)
    u = Î¾.u(t)
    z = Î¶.x(t)
    v = Î¶.u(t)
    Î» = Î»(t)
    Q = Lxx(Î»,x,u,t,Î¸)
    S = Lxu(Î»,x,u,t,Î¸)
    R = Luu(Î»,x,u,t,Î¸)
    return z'Q*z + 2*z'S*v + v'R*v
end


end # module